This XML file does not appear to have any style information associated with it. The document tree is shown below.
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Semaphore</title>
<subtitle>News from Semaphore CI</subtitle>
<id>https://semaphoreci.com/blog/</id>
<link href="https://semaphoreci.com/blog"/>
<link href="https://semaphoreci.com/blog/feed.xml" rel="self"/>
<updated>2018-12-20T00:00:00+00:00</updated>
<author>
<name>Semaphore Team</name>
</author>
<entry>
<title>
What’s Real and What’s Not: Interview with Kubernetes Pioneer Tim Hockin
</title>
<link rel="alternate" href="https://semaphoreci.com/blog/2018/12/20/kubernetes-tim-hockin-on-whats-real.html"/>
<id>
https://semaphoreci.com/blog/2018/12/20/kubernetes-tim-hockin-on-whats-real.html
</id>
<published>2018-12-20T00:00:00+00:00</published>
<updated>2018-12-20T00:00:00+00:00</updated>
<author>
<name>Wojtek Cichoń</name>
</author>
<summary type="html">
<p class="figure"> <img alt="Interview with Tim Hockin on Kubernetes, Principal Software Engineer at Google" src="https://semaphoreci.com/blog/assets/images/2018-12-20/semaphore-interview-Tim-Hockin-0993641d.png" /> </p> <p>In the Developer Interview series, we talk to engineers and pick their brains about how they work, what wisdom they would like to pass on, and the most challenging problems they’ve faced during developing.</p> <p>This time we had a chat with Tim Hockin, Principal Software Engineer at Google.</p> <p>
</summary>
<content type="html">
<p class="figure"> <img alt="Interview with Tim Hockin on Kubernetes, Principal Software Engineer at Google" src="https://semaphoreci.com/blog/assets/images/2018-12-20/semaphore-interview-Tim-Hockin-0993641d.png" /> </p> <p>In the Developer Interview series, we talk to engineers and pick their brains about how they work, what wisdom they would like to pass on, and the most challenging problems they’ve faced during developing.</p> <p>This time we had a chat with Tim Hockin, Principal Software Engineer at Google.</p> <p></p> <p><strong>You describe yourself as <em>&quot;a systems software engineer [who writes] software most people don&#39;t see&quot;</em> on <a href="http://www.hockin.org/%7Ethockin/">your homepage</a>. That&#39;s hard to believe when looking at Kubernetes success and the exposure it gets. What went wrong? How come so many people see &quot;your project&quot;? What’s the key to its success?</strong></p> <p>I think the key to its success is that it solves real problems that real people have. There&#39;s a lot of projects that try to change the way people work or try to change the way people think about things. Kubernetes came directly from a real experience at Google where we built Borg. We&#39;ve been using it for 14 years and it worked very well. I suddenly realized that &quot;one day I&#39;ll leave Google and when I do, what will I do? How will I exist without all these tools?&quot; </p> <p>The reason that Kubernetes is successful is because people look at it and they don’t understand why they need it until they see it do stuff. Then they say &quot;Oh my God, I need that!&quot;. I can&#39;t say how many talks and presentations I&#39;ve done in front of skeptical audiences where they don&#39;t understand what it&#39;s for. Just by showing short and simple features like “let&#39;s do a rolling update” I watch what happens. I stop it halfway through and then roll it back and they&#39;re like ”that&#39;s what I do by hand. It takes me a ton more energy than what you just did.” So I think it captures things that people really wanted.</p> <p>I would also add that in the bigger picture, Kubernetes is really not seen by a lot of people. It is not and will never be as visible as Android, or Chrome, or Google Maps. It is still very much &quot;software that most people don&#39;t see&quot;.</p> <p><strong>You mentioned Borg and I was wondering what’s the correlation between Borg and Kubernetes. I doubt that it’s 1 to 1.</strong></p> <p>It&#39;s derived from the same ideas and the same patterns, but Borg is millions of lines of code that are very Google-specific. It has thousands of features that nobody would use except Google.</p> <p><strong>There was a movement called &quot;Google infrastructure for everyone&quot; way before Kubernetes got so popular. Do you think that there are still some tools you use inside of Google infrastructure that can be open sourced and added to the stack of modern DevOps tools?</strong></p> <p>I hope so. We have made a ton of investment in tools increasing developer productivity, compiler tools, distributed builds and automatic testing. There&#39;s been some blog posts and some papers written about how Forge works which is our distributed build system. We have little silly things that you might not think about, like test logs collection. Every time I run a test through our test system the logs are captured and stored somewhere. Then I go back, look at all them and realize that they are giant. </p> <p>We&#39;ve got some really great code review tools that are integrated with static analysis. Googlers can add plugins that say &quot;I want to do an analysis of this sort of thing on my code base&quot;. You put these things in and when somebody sends you a code change it will run your analyzer against their change. Neat stuff. </p> <p>We&#39;ve got these live debugging tools which will capture traces across test runs. If a test fails you can actually go back and single step through the test and figure out what happened and why. All this happens automatically. It&#39;s not like you had to say &quot;all my tests fail. Let me go run it in the debugger.&quot; You just captured it automatically because the cost of saving the data is just so much less. </p> <p>So this is one area where I think Google infrastructure can continue to help influence the world. We&#39;ve got a lot of other things - internal storage systems and other things that are sort of trickling out a little. Bigtable and Spanner are out as Google Cloud products. These are fantastic tools and they have really transformed the way we do things internally. I think we&#39;re getting better at putting out more of what we do.</p> <p><strong>You mentioned that Kubernetes is actually helping people in what they do but it&#39;s no mystery that it has a steep learning curve. It&#39;s complicated, spans across a variety of topics in the software development and maintenance niche. In one of the interviews, you mentioned that the initial mission behind the project was to &quot;provide the hub of ecosystems, plural.&quot; K8s was initiated to minimize human effort in running and scaling but, in the meantime, the project itself adds layers of complexity to itself. Could you elaborate a bit on that? Is there an end to the new ecosystems it brings to life?</strong></p> <p>I hope that each of these &quot;follow-on-ecosystems&quot; is optional and that nobody should be forced to adopt if it doesn&#39;t actually bring any benefits. Istio is just a great example - Kubernetes is an application management platform and it does networking out of necessity because apps are networked. But it doesn&#39;t make sense for Kubernetes to try to be the ultimate network abstraction. It can&#39;t be the perfect service discovery because there is no such thing as perfect. There are a hundred service discovery applications out there. It can&#39;t be the perfect load balancer and it can&#39;t be the perfect traffic router, etc. </p> <p>These things are complicated services and we&#39;ve been trying to keep Kubernetes relatively simple at its core. Early on in the process we created this document &quot;What is Kubernetes.&quot; We defined there what we thought it was, what our swim lanes are, what we’re doing, and what we&#39;re not going to do. We’ve defined how big the Kubernetes box was and how everything else was outside of it.</p> <p>Networking is in the box but only a little bit. We need to keep just enough in order to keep the stuff working. Then you look at what people really need out of the box. For things like Layer 7 HTTP load balancer, go read the spec for Nginx or Envoy or HAProxy. They have hundreds and hundreds of features that are specific to their implementations and they&#39;re all different from each other. </p> <p>There&#39;s no way that Kubernetes could implement all of those things - we would be in a race forever. That’s not where we want to be and we don&#39;t want to be competing with these companies and those projects. We don’t want to provide an abstraction over these things because abstractions loose information, details, access to the underlying systems. We decided that our swim lane is the minimum that we can get away with that helps basic users do basic things. The only thing we’ve got in is the Ingress API. It&#39;s a really simple HTTP API, simple to the point of being not satisfying. Almost everybody who uses Ingress ends up doing something with their specific implementation of Ingress because they need the extra features. </p> <p>Here Istio comes along and says &quot;We’re going to tackle the problem of networking!” They are not a container management system. They work with container management systems. They work with Kubernetes. They are a networking app and like Kubernetes has 100 features for container management, Istio has 100 features for traffic management. You don&#39;t have to use Istio if you don&#39;t want to, if it doesn&#39;t bring you any value. But for a lot of people it does bring incremental value. You can start with a simple API and move into a more detailed, robust and advanced API. It brings complexity which comes with the value. Complexity needs to justify itself because complexity for its own sake is cancer. </p> <p>I&#39;m a little bit sad how complex Kubernetes is right now. In some sense Kubernetes is not for end users, it’s for people who set up clusters and clusters are for end users. At Google, we&#39;ve always separated the roles that were involved in cluster management into two very specific ones: the cluster operators and the application operators. </p> <p>The cluster operators know everything about Borg and they they know a little bit about each application that runs on Borg in a profile they understand, but not the details. They&#39;re able to keep the Borg clusters up and running and they have SLAs around that and so forth. The application teams (like Google search or Gmail) come in and they say &quot;I know how to use Borg but I don&#39;t know how Borg runs and I don&#39;t need to.&quot; They come in and they run their applications on top of Borg and that split gives people a really nice ability to focus. Kubernetes is really aimed at those cluster operators. </p> <p>The truth is that a lot of companies and organizations today are set up with those two roles in one. It&#39;s tough getting resources out there right, so they get this complexity. It&#39;s unfortunate that networking and security are hard, and they are a big source of complexity for Kubernetes. These are the hardest parts of setting up in Kubernetes because they&#39;re still the hardest parts of our industry in general.</p> <p><strong>As one of the initiators, you have a big picture of where Kubernetes is heading and what are the biggest issues ahead. Could you give us a &quot;Founding Father summary&quot; on the state of Kubernetes in 2018?</strong></p> <p>So 2018 being almost over I think we&#39;ve actually done a decent job at responding to some of the complaints about it being hard to set up certain things in Kubernetes. It has gone a long way towards making cluster setup easier (not easy but easier). There&#39;s still more that we can do there. </p> <p>I think Kubernetes is starting to get to a place where it&#39;s a little bit more stable. We&#39;re not seeing as many major features come in anymore. The development of this system has moved more and more to plugins and things that are outside of the core. You can see this even if you look at the graphs of number of commits against the GitHub kubernetes/kubernetes repo that&#39;s trending down. It’s a good thing because more and more projects are moving out of the core repo. Overall, that&#39;s good. </p> <p>Meanwhile the community has grown, Slack has grown, the number of engagements and customers have grown enormously. These are pretty healthy signals to me. </p> <p>We still have too many bugs and too many PRs open. The developer experience process is still being worked on. The code review process and the design process are still being iterated on. This year was really successful. Looking back at the beginning of a year, version 1.8 feels very primitive. We&#39;re closing out more and more of our wishlist and getting further down the list of important features.</p> <p><strong>Do you think that the ideal state (if there is such a thing in the software world) is that the project remains stable? i.e.no big changes occur, it just works and the only thing remained to do is to add plugins to it?</strong></p> <p>Yes, that would be wonderful. It&#39;s software so nothing is really timeless. We&#39;re constantly updating for things like security and there&#39;ll always be a trickle of new features and things coming in. But the rate of change of things (especially things that have user facing impacts like API changes or functionality changes) is definitely slowing down and they have to, for the sake of the project.</p> <p>More and more things have to be in the follow-up ecosystems. I don&#39;t want to do a ton of new HTTP oriented work. I want that to land in other systems like Istio and other service meshes like Conduit. They&#39;re more experts in networking than I am. We’re putting various extension mechanisms together which allow people to do more and more things that are not second class. </p> <p><strong>Kubernetes mission is to ease off developers and devops professionals’ pains in scaling and maintaining software - it&#39;s all about reliability and uptime. Continuous Integration and Deployment are also touching the same topics but on a level closer to source code and testing. Is there a common space between K8s and CI/CD that needs to be addressed in the future?</strong></p> <p>So this is one of those places where I don&#39;t think Kubernetes itself should go. I think CI/CD is the most important thing that people want to use a system like Kubernetes for, but I don&#39;t think that Kubernetes should be trying to be a CI/CD system. There are commercial offerings, there are Open Source offerings, there are cloud centric offerings and I think those experts should be focusing on how to do CI/CD. </p> <p>The interesting question is more what can Kubernetes do to make it easier to consume from CI/CD. Whether that’s more triggers, more push-based solutions and the GitOps workflow process - those sorts of questions are the interesting ones. If anybody submits a patch to add CI/CD to Kubernetes API, I will do my best to shut it down. I don&#39;t think that makes sense. But certainly I want Kubernetes be useful for that. The number one thing we hear from people is &quot;this looks really cool, can I run my build against it?&quot;. We can do a better job at making that easy and possible. I think we&#39;ve done a lot of evolution there. A good example is the ability to do Docker builds without Docker. This sort of thing is important.</p> <p><strong>In one of the interviews you’ve said that &quot;people don&#39;t wanna bet on a new horse&quot; and I guess this was the way with Kubernetes in its early days. A lot of effort has been put to persuade decision-makers and senior devs to use the project and make it one of the busiest communities on GitHub. What do you think really contributed to making people adopt K8s despite its complexity and singularity?</strong></p> <p>Kubernetes got the most attention from us delivering real demonstrations that showed people how to do the old things. We tried not to be academic. We tried not to be theoretical about what to do and think. For example, we were showing how to make a rolling update of an application and rolling it back once there&#39;s something bad with it during the update. This is something that DevOps people do every day and it’s not always automated. With Kubernetes you can make it easier. You can have the automation around a consistent API and consistent tooling, so that you can do this more often with more confidence. This is exactly the issue we&#39;ve heard about from a lot of people and that’s why they now talk about Kubernetes adoption. They say &quot;I went from one push a day to 20 pushes&quot; and I think those are the things that got the most attention. </p> <p>The first KubeCon was less than a thousand people and now we&#39;re looking at sixty five hundred. But it was important that we would always put in the demos. A lot of my presentations early on were just demos like &quot;Let me show you 10 things that I can do with Kubernetes&quot;. Those are the things that captured people&#39;s attention. I remember I did one at USENIX LISA for system administrators and after the talk people came up and were like ”This is my job - you just automated my job”. I feel a little bit bad about that, but at the same time I hope this frees them up to do other things and jobs. </p> <p>What Kubernetes does is self-evident. It has allowed people to take code and deploy it quickly and whether you&#39;re a CEO or a developer you see great value in this. </p> <p><strong>Kubernetes is now a bleeding edge technology keyword. It dominates the so-called &quot;DevOps industry&quot;. The project is in fact so cool that when I saw the <a href="https://kubernetes.io/blog/2018/10/04/introducing-the-non-code-contributors-guide/">Non-Code Contributor’s Guide</a> I was excited that I might be of some help (even before properly educating myself on the topic). I even saw an article that made some resonance in the community entitled <a href="https://blog.jessfraz.com/post/you-might-not-need-k8s/">“You might not need Kubernetes”</a>. Is the hype around the project any good or does it create too much noise and shifts the original focus of the project?</strong></p> <p>There&#39;s a lot of noise and anytime there&#39;s a successful thing and money&#39;s involved there&#39;s a lot of people who are trying to shift the message back to themselves, their product or how to make money on this thing. One of the things that we were instructed when we were reviewing talks for a KubeCon was to make sure that the talks are not vendor pitches. We don&#39;t want people to pitch their product. One of the main reasons that I end up rejecting proposals was that &quot;this is just a pitch, a company is showing me their product&quot; and that&#39;s just not what people want to see at a conference like this. I don&#39;t think the noise itself is inherently bad. The more awareness we have the better off the project will be. </p> <p>Obviously I care a lot about the success and the longevity of Kubernetes. I see that when people come in now, they come with higher expectations. As the bar gets higher and people start to accept that you can do certain things automatically, they’re looking for what&#39;s next. Now that Kubernetes is out there, there&#39;s also a half dozen other systems that can do things in the same way. They make different tradeoffs, of course. People come in with different levels of expectations but I don&#39;t think that diminishes the value of the community.</p> <p>The non-code contributors guide was there because we have a lot of people who are working at companies using Kubernetes or who are interested in the technology and say &quot;I&#39;m not really a developer but this is interesting and compelling stuff. How can I help you?&quot; There are hundred things that non-coders can do to contribute.</p> <p><strong>I&#39;m a careful reader and I noticed on your homepage that you&#39;re a Fine arts minor! Are you an after-hour artist and paint large-scale steering wheels?</strong></p> <p>I got my first computer when I graduated from high school. Before that I was a painter and all through high school I studied painting and sculpture. I went to university to become a painter and my parents tried to talk me out of it. My father was an engineer, my brother is a mechanical-electrical engineer and my mom kept telling me &quot;why don&#39;t you go be an engineer and you can paint on the side&quot;. I said “No, I want to be an artist and a teacher (I had a really influential art teacher in high school).” So I was majoring in Fine Arts and did a double major in Fine Arts and Education. Then I got a computer as a graduation gift. I started to play with it and realized how much fun it was. One of my friends took a C programming class, so I took it as well and it was easy. It just spoke to me. I understood it all. I realized that I actually really enjoy doing this and I wanted to do more of this. I took more classes and eventually changed majors from art to computer science. </p> <p>I don&#39;t paint much after work as it requires more time and space commitment which is hard to meet. Sculpture even more so. But I do draw a lot and I&#39;m known around our office now for doodling on sticky notes during meetings especially. It’s like my brain&#39;s screensaver. There’s even a running joke around that if Tim is drawing, that means he is paying attention. </p> <p>Doodling is not exactly the same as painting, but it&#39;s a creative outlet. The truth is that writing code satisfies the same urge that painting does — the need for creative expression. I don’t write as much code today as I wrote a couple years ago but when I do, I feel that same sense of pride from doing something creative on my own.</p> <p><br></p> <p>Big thanks to Tim for taking the time to answer our questions. Read our related articles below, and subscribe to our newsletter to <a href="http://eepurl.com/drCQf1">keep up to speed with our future posts, updates and interviews</a>.</p> <p><em>Looking for fast CI/CD that works well with Kubernetes? <a href="/">Try Semaphore for free</a>.</em></p> <p><em>Article <a href="https://thenewstack.io/kubernetes-pioneer-tim-hockin-on-whats-real-and-whats-not/">originally published on The New Stack</a>.</em></p> <h3 class="f4 lh-title">Next up in cloud-native development:</h3> <ul> <li><a href="/blog/2018/11/22/high-velocity-cicd.html">Why Cloud Native Success Depends on High-Velocity CI/CD</a></li> <li><a href="/blog/2018/11/06/semaphore-2-0-launched.html">Semaphore 2.0 launched with customizable CI/CD pipelines, autoscaling and more</a></li> <li><a href="/blog/2018/01/10/interview-traefik.html">Building Open Source Solutions for Microservices: Meet Emile Vauge of Traefik</a></li> </ul>
</content>
</entry>
<entry>
<title>
Why Cloud Native Success Depends on High-Velocity CI/CD
</title>
<link rel="alternate" href="https://semaphoreci.com/blog/2018/11/22/high-velocity-cicd.html"/>
<id>
https://semaphoreci.com/blog/2018/11/22/high-velocity-cicd.html
</id>
<published>2018-11-22T00:00:00+00:00</published>
<updated>2018-11-22T00:00:00+00:00</updated>
<author>
<name>Marko Anastasov</name>
</author>
<summary type="html">
<p><em>Article <a href="https://thenewstack.io/why-cloud-native-success-depends-on-high-velocity-ci-cd/">originally published on The New Stack</a>.</em></p> <p class="figure"> <img alt="High Velocity CI/CD" src="https://semaphoreci.com/blog/assets/images/2018-11-22/high-velocity-cicd-5b507d39.png" /> </p> <p>The goal of every tech leader is to deliver bug-free products to customers at high velocity. Today’s cloud-native technology can empower engineering teams to iterate, at scale, faster than ever. But teams that don’t also change how they deliver software will struggle to benefit from the agility and speed to deployment that cloud native can offer.</p> <p>
</summary>
<content type="html">
<p><em>Article <a href="https://thenewstack.io/why-cloud-native-success-depends-on-high-velocity-ci-cd/">originally published on The New Stack</a>.</em></p> <p class="figure"> <img alt="High Velocity CI/CD" src="https://semaphoreci.com/blog/assets/images/2018-11-22/high-velocity-cicd-5b507d39.png" /> </p> <p>The goal of every tech leader is to deliver bug-free products to customers at high velocity. Today’s cloud-native technology can empower engineering teams to iterate, at scale, faster than ever. But teams that don’t also change how they deliver software will struggle to benefit from the agility and speed to deployment that cloud native can offer.</p> <p></p> <p>Hosted CI/CD solutions can do a very good job of solving the “integration” part, such as compiling code and with varying degrees of performance and usability. <a href="/">Semaphore</a>’s platform, for example, is based on bare metal hardware to provide the best possible performance. This makes a big difference in productivity in scenarios of parallel testing.</p> <p>But in a cloud-native approach, managing many microservices in parallel makes delivery more challenging than integration. We need a quick, standardized way of delivering new services to production. And we need to make sure that ops work doesn’t explode in complexity, as we no longer deploy and run a single application, but dozens or even hundreds of services.</p> <p>The first step is to embrace the programmability of the cloud — you describe your infrastructure as code and manage it in a version control system. Once you treat all infrastructure as you do application code, you can apply continuous delivery to address the challenges of operational complexity. But for that to happen, your CI/CD tool needs to be programmable, too.</p> <p>Traditional hosted CI/CD services offer deployment features optimized for monolithic Web application deployment, with limited flexibility. When teams move to containers and cloud-native computing, they tend to rely on a CI vendor as a “workhorse” — but often invest engineering time in operating their own instances of Jenkins, which is sometimes combined with Spinnaker, for CD. This is a forced move due to lack of a well-rounded CI/CD product. Teams then face the time-sinking task of maintaining and scaling internal infrastructure, while suffering from a poor user experience and stability issues. It’s a lot of work that brings no value to the company’s end customers.</p> <p>At Semaphore, we subscribe to the idea that while problems can be complex, solutions must be simple. Since its inception in 2012, we guided product development by two principles: speed and simplicity. About a year ago, we asked ourselves: what kind of a CI/CD product would these principles translate to today?</p> <p>The answers we found have led us to create <a href="/product/">a whole new CI/CD product — Semaphore 2.0</a>, which launched this month. The new Semaphore is based on a number of principles and patterns that aim to improve developer productivity for cloud native environments:</p> <p class="figure"> <img alt="CI/CD Autoscaling" src="https://semaphoreci.com/blog/assets/images/2018-11-22/semaphore-2-0-ci-cd-autoscaling-graph-4e29f55f.png" /> </p> <h3 class="f4 lh-title">1. Speed always matters.</h3> <p>Nobody wants their builds to run slower. If developers need to wait for more than about 10 minutes for CI results, they lose focus and work less effectively. A CI/CD product should provide tools to measure and speed up build time.</p> <p>Take the engineering team at Par8o, an enterprise healthcare company. They use a development workflow that is similar to GitHub flow, merging to master once a story has been verified in the QA environment.</p> <p>The problem was this was happening too rarely, as running all tests on development laptops was taking more than two hours. So in one workday, the entire engineering team is unable to merge more than three times per day.</p> <p>Once they started using Semaphore’s automatic test parallelization feature called <a href="/landers/boosters-rails">Boosters</a>, average build time dropped to just 13 minutes, improving team morale and productivity. Such challenges will continue to matter in the future.</p> <h3 class="f4 lh-title">2. Every developer should be able to define and run a custom CD pipeline in minutes.</h3> <p>Most teams developing apps with Docker need to use multi-stage pipelines. For example, in the CI phase we usually need to build container images once, “fan out” to multiple parallel jobs for testing, then “fan in” to collect test coverage results.</p> <p>Some teams use different strategies across stages. For example, teams at companies such as Toyota have tests that run against different environments, such as QA, staging and production. The code base is the same, but is combined with different configuration or parameters. These tests don’t need to run at the same time, but manually on demand with a system of record. Changing one step in a build should seamlessly reflect in all environments.</p> <p>Another common use case is to “gate” deployments on the success of another build. For example, we may have multiple applications that all use one library. In that case, we want those applications to not deploy if the tests for that library fail.</p> <h3 class="f4 lh-title">3. Infrastructure is moving from fixed to ephemeral resources.</h3> <p>When CI/CD resources are limited, developers are often blocked in busy times of the week. This is in contrast with the cloud-native “pay only what you use” model, in which the resources we use scale automatically to support the team’s actual needs.</p> <h3 class="f4 lh-title">4. A CI/CD feedback loop is more than a pull request status.</h3> <p>The tool of choice should be programmable and act as a handy extension of developers’ natural workflow.</p> <p>Bootstrapping a new project, including a working CI/CD pipeline, should ideally take minutes. As always automation helps move faster while removing the risk associated with human error.</p> <p>By describing our CI/CD pipelines in code, as we already do for our cloud infrastructure, we also increase visibility, enable quick onboarding and enable fast transfer of knowledge. If all functions of the CI/CD tool are exposed through a command-line interface, developers can interact and build upon it as easily as they work with code libraries.</p> <h3 class="f4 lh-title">5. CD throughput needs to be measured.</h3> <p>Instead of prescribing the same key numbers for every project, CI/CD tool should let users choose their own metrics and define their own dashboards. Some projects are having an issue with build time. On others it’s most critical to know how often we deploy to users.</p> <p>Most metrics, however, are no longer relevant on a per-repository level. When an application is composed of many microservices, what matters are aggregate metrics. So CI/CD dashboards can include summaries of the latest work across a family of services, insights about deploys to production or average build duration.</p> <p>Cloud-native computing was once reserved only for the biggest and most advanced engineering organizations like Netflix or Spotify. The rise of Docker, Kubernetes and related tools and services is making the model accessible in the mainstream. Likewise, doing Continuous Delivery at scale is in a transition from requiring a specialized in-house team to becoming a turn-key service. At Semaphore, we’re thrilled to be part of this journey, and remain committed to making CI/CD easy for everyone.</p> <p><em>Accelerate the way your team builds, tests and deploys projects with powerful and fully customizable CI/CD pipelines. <a href="/product">Give Semaphore 2.0 a spin today, and get $20 of free monthly credit</a>.</em></p> <p><strong>Read next:</strong></p> <ul> <li><a href="/product">Set up CI/CD that just works</a></li> <li><a href="/blog/2018/11/06/semaphore-2-0-launched.html">Semaphore 2.0 launched with customizable CI/CD pipelines, autoscaling and more</a></li> <li><a href="/blog/2018/09/13/semaphore-uncut-first-look-at-2-0.html">Semaphore Uncut: A First Look at Semaphore 2.0</a></li> <li><a href="/blog/2018/09/20/semaphore-uncut-auto-promotion-continuous-delivery-pipelines.html">What is Continuous Integration?</a></li> </ul>
</content>
</entry>
<entry>
<title>Semaphore Uncut: CI/CD Slack Notifications</title>
<link rel="alternate" href="https://semaphoreci.com/blog/2018/11/21/semaphore-uncut-cicd-slack-notifications.html"/>
<id>
https://semaphoreci.com/blog/2018/11/21/semaphore-uncut-cicd-slack-notifications.html
</id>
<published>2018-11-21T00:00:00+00:00</published>
<updated>2018-11-21T00:00:00+00:00</updated>
<author>
<name>Dunja Radulov</name>
</author>
<summary type="html">
<p class="figure"> <img alt="Semaphore Uncut: Slack Notifications" src="https://semaphoreci.com/blog/assets/images/2018-11-21/semaphore-uncut-slack-notifications-e10c39ff.jpg" /> </p> <p>Semaphore Uncut is our weekly live show where we talk about continuous integration, continuous delivery and <a href="/product">Semaphore 2.0, our new product with customizable CI/CD pipelines</a>. In our latest episode of Semaphore Uncut, we showed you how to set up Slack notifications in Semaphore 2.0. Read on to learn more and watch the video. </p> <p>
</summary>
<content type="html">
<p class="figure"> <img alt="Semaphore Uncut: Slack Notifications" src="https://semaphoreci.com/blog/assets/images/2018-11-21/semaphore-uncut-slack-notifications-e10c39ff.jpg" /> </p> <p>Semaphore Uncut is our weekly live show where we talk about continuous integration, continuous delivery and <a href="/product">Semaphore 2.0, our new product with customizable CI/CD pipelines</a>. In our latest episode of Semaphore Uncut, we showed you how to set up Slack notifications in Semaphore 2.0. Read on to learn more and watch the video. </p> <p></p> <h3 class="f4 lh-title">How to set up Slack notifications in Semaphore 2.0</h3> <p>In the previous episode, <a href="/blog/2018/11/14/semaphore-uncut-semaphore-classic-vs-2-0.html">we talked about the differences between Semaphore Classic and Semaphore 2.0</a>. This time around, we showed you Slack Notifications in Semaphore 2.0. See how they work below:</p> <div itemprop="video" itemscope itemtype="http://schema.org/VideoObject"> <meta itemprop="duration" content="00:36:46" /> <meta itemprop="thumbnailUrl" content="https://i.ytimg.com/vi/dG7ilfyL4Mw/2.jpg?time=1438331231591" /> <meta itemprop="URL" content="https://www.youtube.com/embed/rF6IvDDGtUo" /> <meta itemprop="embedURL" content="https://www.youtube.com/embed/rF6IvDDGtUo" /> <meta itemprop="uploadDate" content="2018-11-14T14:19:00+01:00" /> <meta itemprop="height" content="315" /> <meta itemprop="width" content="560" /> <span itemprop="description"> <p><span itemprop="name">Semaphore Uncut: Slack Notifications</span></p> </span> <iframe width="560" height="315" src="https://www.youtube.com/embed/rF6IvDDGtUo" frameborder="0" allowfullscreen></iframe> </div> <h3 class="f4 lh-title">What&#39;s next</h3> <p>In today&#39;s episode of Uncut, we&#39;re <a href="https://www.youtube.com/watch?v=0WIwILAq4O0">setting up a CI/CD pipeline for a Rails application</a>.</p> <p>To give Semaphore 2.0 a try, <a href="https://docs.semaphoreci.com/article/88-migration-guide-for-semaphore-classic-users">read our migration guide</a>, or <a href="/product">jump straight in and get $20 of free monthly credit</a>. </p> <p>Happy building, and see you in the next episode of Semaphore Uncut!</p> <p><strong>Read/watch next:</strong></p> <ul> <li><a href="/blog/2018/11/06/semaphore-2-0-launched.html">Semaphore 2.0 launched with customizable CI/CD pipelines, autoscaling and more</a></li> <li><a href="/product">Set up CI/CD that just works</a></li> <li><a href="/blog/2018/09/13/semaphore-uncut-first-look-at-2-0.html">Semaphore Uncut: A First Look at Semaphore 2.0</a></li> <li><a href="/blog/2018/09/20/semaphore-uncut-auto-promotion-continuous-delivery-pipelines.html">Semaphore Uncut: Auto-promotion of Continuous Delivery Pipelines</a></li> </ul>
</content>
</entry>
<entry>
<title>
Maker to Manager: Interview with Director of Engineering at Dribbble
</title>
<link rel="alternate" href="https://semaphoreci.com/blog/2018/11/15/dribbble-developer-interview.html"/>
<id>
https://semaphoreci.com/blog/2018/11/15/dribbble-developer-interview.html
</id>
<published>2018-11-15T00:00:00+00:00</published>
<updated>2018-11-15T00:00:00+00:00</updated>
<author>
<name>Wojtek Cichoń</name>
</author>
<summary type="html">
<p class="figure"> <img alt="Developer interview with Jeffrey Chupp, Director of Engineering at Dribbble" src="https://semaphoreci.com/blog/assets/images/2018-11-15/dribbble-developer-interview-jeffrey-chupp-d36aab8e.png" /> </p> <p>In the Developer Interview series, we talk to engineers who use <a href="/">Semaphore</a> and pick their brains about how they work, what wisdom they would like to pass on, and the most challenging problems they’ve faced during developing.</p> <p>This month, we had a chat with Jeffrey Chupp, the Director of Engineering at <a href="https://dribbble.com">Dribbble</a>.</p> <p>
</summary>
<content type="html">
<p class="figure"> <img alt="Developer interview with Jeffrey Chupp, Director of Engineering at Dribbble" src="https://semaphoreci.com/blog/assets/images/2018-11-15/dribbble-developer-interview-jeffrey-chupp-d36aab8e.png" /> </p> <p>In the Developer Interview series, we talk to engineers who use <a href="/">Semaphore</a> and pick their brains about how they work, what wisdom they would like to pass on, and the most challenging problems they’ve faced during developing.</p> <p>This month, we had a chat with Jeffrey Chupp, the Director of Engineering at <a href="https://dribbble.com">Dribbble</a>.</p> <p></p> <p><strong>You joined Dribbble in 2015 as a part of the development team, and currently your job title is Director of Engineering. What was the most challenging part of this transition from a “hands-on experience” developer to a more business-related/strategic role?</strong></p> <p>I think my experience has been fairly typical of people moving from maker to manager roles: the hardest part for me has been getting comfortable with the change in how my value is determined. When I was purely a developer, my value was easy to measure in terms of my speed and the quality of the features I worked on. Now my value is measured in how effective my teammates are.</p> <p>That’s a lot fuzzier and harder to quantify – you have to take a much more zoomed-out view. And you aren’t great at being a manager at first because the skill set is so different from the developer skill set.</p> <p>Because of how difficult it is to quantify your value as a manager and because you aren’t great at it yet, it is tempting to fall back into the maker role for that dopamine hit that comes from the visible progress of shipping code.</p> <p>That temptation hasn’t gone away entirely but I’m making good progress rewiring my brain to get that same feeling by amplifying my teammates. It helps that I have great teammates.</p> <p><strong>I understand that this change has a lot to do with Dribbble scaling its engineering team. Dribbble is a 100% remote team, and one of your co-founders, Dan Cederholm, <a href="https://www.webdesignerdepot.com/2011/05/interview-with-dribbbles-founder-dan-cederholm/">admits in an Interview</a> that for <em>... a tiny, bootstrapped operation, the scaling has been a challenge.</em> Can you tell us more about what are the biggest challenges in terms of scaling a remote engineering team?</strong> </p> <p>You’re exactly right, I was promoted internally because of growth. We’re still growing (shameless plug: <a href="https://dribbble.com/careers">come work with us!</a>).</p> <p>I think remote jobs have a huge advantage in hiring: When location isn’t a factor, you can hire the best people from a much larger pool of candidates.</p> <p>Asynchronous communication has been a challenge as we’ve grown our remote team. When you’re 8 people, interrupts are naturally capped by the small team size. Once you grow to 40-ish people and stretch across time zones (from the UK to California) things start to get trickier. </p> <p>For example, when you’re co-located in an office, there are visual cues to help you see that someone is deeply focusing and shouldn’t be interrupted (e.g. Patrick has his headphones on and is typing furiously while squinting at his text editor). Working remotely, you have to be more deliberate about choosing the best method for communicating without breaking someone’s flow.</p> <p>To minimize interrupts, we try to have as few scheduled meetings as possible to optimize for heads-down time. Monday and Friday are 100% meeting-free. Engineering has stand-up on Tuesday through Thursday to ensure face-to-face time with other engineers and do some knowledge sharing. </p> <p>Our product teams have weekly sprint check-ins. Finally there’s a weekly company meeting. Beyond that we’ve landed on communicating heavily through our tools.</p> <p><strong>When it comes to scaling up a dev team, how much do you rely on management techniques, how much on company culture and how much on tooling?</strong></p> <p>This is a good question. I think our company culture drives all the other things you mention. Put simply, we try to hire excellent people then trust and empower them to do their best work.</p> <p>If our company Slack is constant @channel and @here notifications, that’s not helping people do their best work. If our tools aren’t reliable and async-friendly, that’s not helping people do their best work. You see where I’m going with this. I try to get people to talk about the frictions they’re experiencing in 1:1s and then I own figuring out what steps we can take to reduce those frictions.</p> <p>Our tools are mostly about facilitating async communication to get things done. Broadly speaking: Slack is where ideas are discussed before they become tasks in <a href="https://www.getflow.com/">Flow</a>. More discussion happens in Flow as-needed, and then a developer submits a pull-request on GitHub proposing a solution. More discussion happens in the PR. If the tests pass and the code is approved, things go to production.</p> <p>Sometimes that process takes minutes and sometimes it happens across days. Being spread across time zones means it is common for a developer to submit a PR as they leave for the day, and find it already reviewed when they start work again the next day. That’s async at its best.</p> <p><strong>Speaking of tooling - Dribbble has been using <a href="/">Semaphore</a> since 2013 - if you could point out a couple of specific Semaphore features that enable you to deliver your software and scale up without obstacles, what would those be?</strong></p> <p>Our Semaphore usage has been really boring – in a good way! We have a pretty vanilla Rails app and Semaphore <em>“just works.”</em> Everyone on the team feels comfortable using it, from hardcore backend developers to markup and style experts.</p> <p>There are a couple features that have helped us scale: we make good use of Semaphore’s caching between builds and have our test suite split across multiple parallel jobs to help keep it speedy.</p> <p>We’re curious to investigate Semaphore’s Docker support in the near future. We’ll keep ramping up our parallel jobs pool as we grow as well.</p> <p><strong>To what extent is a CI/CD tool such as Semaphore also a collaboration-empowering tool?</strong> </p> <p>I appreciate how reliable Semaphore has been. This means that we get to focus on making our users happy, and don’t have to spend time trying to divine why our CI isn’t working.</p> <p>With <a href="/docs/adding-github-bitbucket-project-to-semaphore.html">its GitHub integration</a>, Semaphore adds to the PR conversation. We have a thorough test suite, so a green build gives us a high degree of confidence that the code changes aren’t going to have unexpected side effects.</p> <p><strong>What is your current focus when it comes to advancing the product and its dev infrastructure and why?</strong></p> <p>We have a lot of cool features on the roadmap for our users. My current focus is doubling-down on reducing frictions for my teammates and enabling them to be more productive so they can deliver on those features. Some practical applications of this include being hyper-aware of fixing missing technical documentation, flaky tests, and clarifying confusing parts of our ever-expanding codebase.</p> <p>Things on my list to investigate in the short term are how we might be able to leverage continuous deployment, further speed up our test suite, and improve collaboration across product teams.</p> <p><strong>I took a peek at your side-project <a href="http://www.hallofstats.com/">“Hall of stats”</a>. I would love to see its equivalent when it comes to the NBA Hall of Fame. What was the main motivation behind it - was it just for fun, or were you on a mission to demonstrate that according to maths the National Baseball Hall of Fame should look differently?</strong> </p> <p>Haha. You’re not the first one to request an NBA version of the Hall of Stats. I love that side-project. My BFF Adam Darowski is the brains behind all the goodness there.</p> <p>Players get into the Hall of Fame via a voting process and (like all voting) the results are political and somewhat arbitrary. Adam felt it was worth exploring what a merit-based Hall might look like and he’s worked hard to refine a powerful (but simple) algorithm for determining qualification. You can read more about this on the <a href="http://www.hallofstats.com/about">Hall of Stats about page</a>. The project has been hugely successful and I’ve been happy to help Adam work on it.</p> <p>Fun fact: When I first saw a rendering of <a href="http://www.hallofstats.com/player/ruthba01">Babe Ruth’s stats chart</a> for the Hall of Stats, I was convinced that something was broken in the code. I told Adam and he assured me that the code worked fine, Ruth was just that good.</p> <p><br></p> <p>Big thanks to Jeffrey for taking the time to answer our questions. Read our related articles below, and subscribe to our newsletter to <a href="http://eepurl.com/drCQf1">keep up to speed with our future posts, updates and interviews</a>.</p> <p>Happy building! <br></p> <p><em>Want to let your team focus on the code and have <a href="/">the fastest CI/CD service</a> take care of CI/CD in the background? <a href="/product">Try Semaphore for free</a>.</em></p> <p><br></p> <h3 class="f4 lh-title">Related reads:</h3> <ul> <li><a href="/blog/2018/09/25/slimjs-interview.html">Performance and Usability as Top Priorities: Interview with Slim.js Creator</a></li> <li><a href="/blog/2017/07/27/what-is-the-difference-between-continuous-integration-continuous-deployment-and-continuous-delivery.html">What&#39;s the Difference Between Continuous Integration, Continuous Deployment and Continuous Delivery?</a></li> <li><a href="/blog/2017/03/02/what-is-proper-continuous-integration.html">What is Proper Continuous Integration?</a></li> </ul>
</content>
</entry>
<entry>
<title>Semaphore Uncut: Semaphore Classic vs. 2.0</title>
<link rel="alternate" href="https://semaphoreci.com/blog/2018/11/14/semaphore-uncut-semaphore-classic-vs-2-0.html"/>
<id>
https://semaphoreci.com/blog/2018/11/14/semaphore-uncut-semaphore-classic-vs-2-0.html
</id>
<published>2018-11-14T00:00:00+00:00</published>
<updated>2018-11-14T00:00:00+00:00</updated>
<author>
<name>Dunja Radulov</name>
</author>
<summary type="html">
<p class="figure"> <img alt="Semaphore Uncut: Semaphore Classic vs. Semaphore 2.0" src="https://semaphoreci.com/blog/assets/images/2018-11-14/semaphore-uncut-classic-vs-2-0-fca5a4e9.jpg" /> </p> <p>Last week, we officially launched Semaphore 2.0,<br> <a href="/product">our new continuous integration and delivery product with customizable CI/CD pipelines, autoscaling, and more</a>. Since many of you asked us about the differences between Semaphore Classic and 2.0 and which one better fits your needs, our latest episode of Semaphore Uncut focuses on what you should know about Classic vs. 2.0. Read on to learn more and watch the video. </p> <p>
</summary>
<content type="html">
<p class="figure"> <img alt="Semaphore Uncut: Semaphore Classic vs. Semaphore 2.0" src="https://semaphoreci.com/blog/assets/images/2018-11-14/semaphore-uncut-classic-vs-2-0-fca5a4e9.jpg" /> </p> <p>Last week, we officially launched Semaphore 2.0,<br> <a href="/product">our new continuous integration and delivery product with customizable CI/CD pipelines, autoscaling, and more</a>. Since many of you asked us about the differences between Semaphore Classic and 2.0 and which one better fits your needs, our latest episode of Semaphore Uncut focuses on what you should know about Classic vs. 2.0. Read on to learn more and watch the video. </p> <p></p> <h3 class="f4 lh-title">What is the difference between Semaphore Classic and Semaphore 2.0?</h3> <p>In the previous episode, we showed you <a href="/blog/2018/11/02/semaphore-uncut-exploring-semaphore-agents.html">how to use Semaphore agents in your pipeline and adjust them to your specific needs</a>. This time around, we talked about the differences between the functionalities offered in Semaphore Classic and Semaphore 2.0. Watch this week&#39;s episode of Semaphore Uncut to see how CI/CD has evolved, and Semaphore with it:</p> <div itemprop="video" itemscope itemtype="http://schema.org/VideoObject"> <meta itemprop="duration" content="00:42:21" /> <meta itemprop="thumbnailUrl" content="https://i.ytimg.com/vi/dG7ilfyL4Mw/2.jpg?time=1438331231591" /> <meta itemprop="URL" content="https://www.youtube.com/embed/6lJa4xkfRQg" /> <meta itemprop="embedURL" content="https://www.youtube.com/embed/6lJa4xkfRQg" /> <meta itemprop="uploadDate" content="2018-11-07T14:19:00+01:00" /> <meta itemprop="height" content="315" /> <meta itemprop="width" content="560" /> <span itemprop="description"> <p><span itemprop="name">Semaphore Uncut 008 — Semaphore 2.0 vs Semaphore Classic</span></p> </span> <iframe width="560" height="315" src="https://www.youtube.com/embed/6lJa4xkfRQg" frameborder="0" allowfullscreen></iframe> </div> <h3 class="f4 lh-title">What&#39;s next</h3> <p>This Wednesday, Darko will talk with you about Slack notifications in Semaphore 2.0. <a href="https://www.youtube.com/watch?v=rF6IvDDGtUo">Join the episode here</a>.</p> <p>As mentioned, Semaphore Classic is here to stay. If you&#39;d like to test Semaphore 2.0, <a href="https://docs.semaphoreci.com/article/88-migration-guide-for-semaphore-classic-users">read our migration guide</a>, or <a href="/product">jump straight in, get $20 of free monthly credit and give Semaphore 2.0 a try</a>. </p> <p>Happy building, and see you in the next episode of Semaphore Uncut!</p> <p><strong>Read/watch next:</strong></p> <ul> <li><a href="/blog/2018/11/06/semaphore-2-0-launched.html">Semaphore 2.0 launched with customizable CI/CD pipelines, autoscaling and more</a></li> <li><a href="/product">Set up CI/CD that just works</a></li> <li><a href="/blog/2018/09/13/semaphore-uncut-first-look-at-2-0.html">Semaphore Uncut: A First Look at Semaphore 2.0</a></li> <li><a href="/blog/2018/09/20/semaphore-uncut-auto-promotion-continuous-delivery-pipelines.html">Semaphore Uncut: Auto-promotion of Continuous Delivery Pipelines</a></li> </ul>
</content>
</entry>
<entry>
<title>
Semaphore 2.0 launched with customizable CI/CD pipelines, autoscaling and more
</title>
<link rel="alternate" href="https://semaphoreci.com/blog/2018/11/06/semaphore-2-0-launched.html"/>
<id>
https://semaphoreci.com/blog/2018/11/06/semaphore-2-0-launched.html
</id>
<published>2018-11-06T00:00:00+00:00</published>
<updated>2018-11-06T00:00:00+00:00</updated>
<author>
<name>Marko Anastasov</name>
</author>
<summary type="html">
<p class="figure"> <img alt="Semaphore 2.0 launched" src="https://semaphoreci.com/blog/assets/images/2018-11-06/s2-launch-banner-e771eae1.png" /> </p> <p>We are very excited to share the good news with you: <strong><a href="/product">Semaphore 2.0</a> is finally out</strong>!</p> <p>
</summary>
<content type="html">
<p class="figure"> <img alt="Semaphore 2.0 launched" src="https://semaphoreci.com/blog/assets/images/2018-11-06/s2-launch-banner-e771eae1.png" /> </p> <p>We are very excited to share the good news with you: <strong><a href="/product">Semaphore 2.0</a> is finally out</strong>!</p> <p></p> <p>Over the last 6 years, Semaphore has been helping the world’s best engineering teams to deliver great products at high velocity. Such teams as Uber, Dribbble, Freshly and Toyota Connected have trusted us so far. Now, <a href="/product">Semaphore 2.0</a> comes to take continuous delivery practices to the next level. The all-new Semaphore comes with powerful and fully customizable CI/CD pipelines to accelerate the way engineering teams of all sizes build, test and deploy their projects. We think you’re really going to love it.</p> <p><strong><a href="/product">Give it a spin!</a></strong></p> <p>Here&#39;s what&#39;s new:</p> <h3 class="f4 lh-title">Pipelines: Automate any workflow</h3> <p>At the heart of Semaphore 2.0 are fully customizable pipelines. Use them to define CI/CD processes with any number of stages. Want to just push new version of your website live? Want to build containers, run quick unit tests, fan-out to parallel end-to-end tests, fan-in to publish artifacts, and perform blue-green deployment to different environments? Semaphore 2.0 is what you make it to be.</p> <p class="figure"> <img alt="Semaphore 2.0 Workflow" src="https://semaphoreci.com/blog/assets/images/2018-11-06/s2-launch-workflow-zoom-a657bfc6.png" /> </p> <h3 class="f4 lh-title">Autoscale and pay only what you use</h3> <p>Never get blocked by CI during busy times of the week again. Semaphore 2.0 departs from the traditional flat-rate pricing based on a fixed number of boxes. Instead, it scales according to your team’s actual needs and you won’t pay when you’re not using it.</p> <p class="figure"> <img alt="Semaphore 2.0 Autoscaling" src="https://semaphoreci.com/blog/assets/images/2018-11-06/autoscaling-graph-b6a97590.png" /> </p> <h3 class="f4 lh-title">A new interface: Your pipelines look terrific</h3> <p>Semaphore 2.0 can visualize code delivery for the whole engineering organization. But the flexibility comes with no tax on the user experience. In fact, this is the simplest version of Semaphore ever. We’ve maintained the product&#39;s famous ease-of-use, while making it a lighter and friendlier place to work. Fewer parts, more power.</p> <p class="figure"> <img alt="Semaphore 2.0 Pipeline example" src="https://semaphoreci.com/blog/assets/images/2018-11-06/s2-pipeline-4c90e4cf.png" /> </p> <h3 class="f4 lh-title">YML configuration and sem CLI: Hack your CI/CD</h3> <p>Set up continuous integration and deployment straight from your command line — or programmatically. Use sem CLI to get to your first working setup. Edit semaphore.yml to finalize it. Easily automate management of a large number of projects. Semaphore 2.0 fully embraces the configuration-as-code paradigm, required for a successful DevOps culture.</p> <p class="figure"> <img alt="Semaphore 2.0 CLI" src="https://semaphoreci.com/blog/assets/images/2018-11-06/s2-launch-cli-5197aab8.png" /> </p> <h3 class="f4 lh-title">Ready for Continuous Delivery with Docker and Kubernetes</h3> <p>Build, test and deploy container-native systems to Kubernetes. Improved Docker image caching ensures quick transition between CI/CD stages. Securely connect and deploy to your container registry and cloud provider of choice.</p> <h3 class="f4 lh-title">Visualize the right metrics</h3> <p>Get key numbers in front of you with custom dashboards. It can be insights about deploys to production or average build duration. Or resource spending. Or… you get the idea.</p> <p class="figure"> <img alt="Semaphore 2.0 Dashboard" src="https://semaphoreci.com/blog/assets/images/2018-11-06/s2-launch-dashboard-zoom-78ac2e84.png" /> </p> <h3 class="f4 lh-title">Choose the right machine type</h3> <p>Semaphore 2.0 is running on the same rock-solid infrastructure as the original Semaphore. Your code runs in fully isolated VMs backed by bare metal hardware, ensuring maximum security and performance. But not all CI/CD jobs do the same type of work. Now in Semaphore 2.0 you can easily choose between three machine types in any stage of your CI/CD pipelines.</p> <h3 class="f4 lh-title">Semaphore Classic is here to stay</h3> <p>We know how much you rely on Semaphore to do your work and don&#39;t want to impose an uncomfortable migration timeline. We don&#39;t have any plans to sunset Semaphore Classic, and will continue to operate and support it. However it won&#39;t receive any major new features, as our R&amp;D will be focused on Semaphore 2.0.</p> <p>For more information on the differences between Semaphore Classic and 2.0, refer to <a href="https://docs.semaphoreci.com/article/88-migration-guide-for-semaphore-classic-users">the migration guide in documentation</a> and <a href="http://evt.to/eimhidhw">watch the next episode of Semaphore Uncut</a>.</p> <p>We hope that <a href="/product">Semaphore 2.0</a> will help you further improve how you build and deliver software. Happy building!</p> <p><em><a href="/product">Give Semaphore 2.0 a spin today — and get $20 of free monthly credits</a></em></p>
</content>
</entry>
</feed>
